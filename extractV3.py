"""
extractV3.py

Generate V3-specific nucleotide sequence from remapped env .seq file
Along with G2P score

Note: Data must be re-passed through a uniqueness filter

Input: HIV1B-env.remap.sam.<qCutoff>.fasta.<minCount>.seq
Output: HIV1B-env.remap.sam.<qCutoff>.fasta.<minCount>.seq.V3
"""

# After remapping, dashes introduced into env sequence due to alignment
# Strip out dashes at this step

# Protein translation needed to generate G2P scores
# Correct ORF determined by aligning 3 ORFs against reference V3-prot and keeping highest score
# Calculate G2P score off correct protein translation

# Re-apply a uniqueness filter and sum counts together

import os
import sys
from glob import glob
from Bio import SeqIO
from seqUtils import convert_fasta, translate_nuc
from hyphyAlign import *
from minG2P import conan_g2p						# conan_g2p(aaseq) returns (g2p, fpr, aligned)

hyphy = HyPhy._THyPhy (os.getcwd(), 1)
change_settings(hyphy) 					# Default settings are for protein alignment

# Reference sequence is V3 in nucleotide space
refseq = translate_nuc(refSeqs['V3, clinical'], 0)
proteinV3RefSeq = "CTRPNNNTRKSIHIGPGRAFYATGEIIGDIRQAHC"

helpOutput = """Usage: python extractV3.py <folderContainingSeqFiles>
Example (min count 3): python compress_fasta.py ../path/to/files/"""

if len(sys.argv) > 2:
	print helpOutput
	sys.exit()

# Look at all HIV1B-env seq files
globPath = sys.argv[1] + '*.HIV1B-env.remap.sam.*.fasta.*.seq'
files = glob(globPath)

# For each env-nucleotide unique fasta.seq fasta file
for f in files:

	infile = open(f, 'rU')
	try:
		fasta = convert_fasta(infile.readlines())
	except:
		print 'failed to convert', f
		continue
	infile.close()

	# Output file will contain V3 sequence and g2p data
	outfilename = f + ".v3"
	outfile = open(outfilename, 'w')

	print "Writing to file: " + outfilename

	# For each (header, sequence), extract V3
	for header, envSeq in fasta:
		envSeq = envSeq.strip("-")				# Strip out dashes generated by alignment
		aaEnvSeq1 = translate_nuc(envSeq, 0)	# Translate env on 3 different ORFs
		aaEnvSeq2 = translate_nuc(envSeq, 1)
		aaEnvSeq3 = translate_nuc(envSeq, 2)
		aquery1, aref1, ascore1 = pair_align(hyphy, proteinV3RefSeq, aaEnvSeq1)
		aquery2, aref2, ascore2 = pair_align(hyphy, proteinV3RefSeq, aaEnvSeq2)
		aquery3, aref3, ascore3 = pair_align(hyphy, proteinV3RefSeq, aaEnvSeq3)
		aaEnvSeq = "";  aquery = "";    aref = "";  ascore = "";

		# Align 3 different ORFs against protein V3 sequence - take best alignment as correct ORF
		if ascore1 >= ascore2 and ascore1 >= ascore3:
			aaEnvSeq = aaEnvSeq1;	aquery = aquery1;	aref = aref1;	ascore = ascore1;
		elif ascore2 >= ascore1 and ascore2 >= ascore3:
			aaEnvSeq = aaEnvSeq2;	aquery = aquery2;	aref = aref2;	ascore = ascore2;
		elif ascore3 >= ascore1 and ascore3 >= ascore2:
			aaEnvSeq = aaEnvSeq3;	aquery = aquery3;	aref = aref3;	ascore = ascore3;

		left, right = get_boundaries(aref)      # Get left/right boundaries of V3 protein
		v3prot = aquery[left:right]             # Extract correct ORF V3 protein - needed for G2P

		# Generate G2P score
		g2p, fpr, aligned = conan_g2p(v3prot)

		# V3nuc may contain gaps as it comes from the alignment of protein(envSeq) to v3prot - ????
		v3nuc = apply2nuc(envSeq[(3*left):], v3prot, aref[left:right], keepIns=True, keepDel=False)

		# Conditions for dropping data
		# 1) Censored bases were detected ('N')
		# 2) V3 didn't start with C, end with C
		# 3) V3 didn't contain an internal stop codon ('*')
		# 4) Alignment score less than 50

		if 'N' in v3nuc or not v3prot.startswith('C') or not v3prot.endswith('C') or '*' in v3prot or ascore < 50:
			pass
		else:
			header = header + '_G2PFPR_' + str(fpr)
			outfile.write(">" + header)
			outfile.write('\n')
			outfile.write(v3nuc)
			outfile.write('\n')

	outfile.close()
